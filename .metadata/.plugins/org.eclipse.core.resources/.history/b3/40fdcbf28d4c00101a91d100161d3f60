//
// Copyright (C) 2006-2011 Christoph Sommer <christoph.sommer@uibk.ac.at>
//
// Documentation for these modules is at http://veins.car2x.org/
//
// SPDX-License-Identifier: GPL-2.0-or-later
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

#include "veins/modules/application/traci/TraCIDemo11p.h"

#include "veins/modules/application/traci/TraCIDemo11pMessage_m.h"
#include <iostream>

using namespace veins;

Define_Module(veins::TraCIDemo11p);

void TraCIDemo11p::initialize(int stage)
{
    DemoBaseApplLayer::initialize(stage);
    if (stage == 0) {
        sentMessage = false;
        lastDroveAt = simTime();
        currentSubscribedServiceId = -1;
        hasCrashed = false;
    }
}

void TraCIDemo11p::onWSA(DemoServiceAdvertisment* wsa)
{
    if (currentSubscribedServiceId == -1) {
        mac->changeServiceChannel(static_cast<Channel>(wsa->getTargetChannel()));
        currentSubscribedServiceId = wsa->getPsid();
        if (currentOfferedServiceId != wsa->getPsid()) {
            stopService();
            startService(static_cast<Channel>(wsa->getTargetChannel()), wsa->getPsid(), "Mirrored Traffic Service");
        }
    }
}

void TraCIDemo11p::onWSM(BaseFrame1609_4* frame)
{
    TraCIDemo11pMessage* wsm = check_and_cast<TraCIDemo11pMessage*>(frame);

    if (std::string(wsm->getDemoData()) == "COLLISION") {
        // Verificar si estamos cerca del punto de colisiÃ³n
        Coord collisionPos = wsm->getSenderPos();
        double distance = mobility->getPositionAt(simTime()).distance(collisionPos);

        if (distance < 500) { // 500m de radio
            EV << "Recibida alerta de colisiÃ³n a " << distance << "m. Buscando ruta alternativa..." << endl;

            // Obtener ruta actual
            std::string currentRoad = mobility->getRoadId();

            // Intentar cambiar a ruta alternativa
            try {
                if (currentRoad == "32302591#5" || currentRoad == "-33174302#0") {
                    traciVehicle->changeRoute("alt1", 0);
                    EV << "Cambiando a ruta alternativa alt1" << endl;
                }
                // AÃ±adir mÃ¡s condiciones para otras rutas segÃºn sea necesario

                // Forzar actualizaciÃ³n de ruta inmediata
                traciVehicle->reroute();
            } catch (const cRuntimeError& e) {
                EV << "Error al cambiar ruta: " << e.what() << endl;
            }
        }
    }
}

void TraCIDemo11p::handleSelfMsg(cMessage* msg)
{
    if (TraCIDemo11pMessage* wsm = dynamic_cast<TraCIDemo11pMessage*>(msg)) {
        // send this message on the service channel until the counter is 3 or higher.
        // this code only runs when channel switching is enabled
        sendDown(wsm->dup());
        wsm->setSerial(wsm->getSerial() + 1);
        if (wsm->getSerial() >= 3) {
            // stop service advertisements
            stopService();
            delete (wsm);
        }
        else {
            scheduleAt(simTime() + 1, wsm);
        }
    }
    else {
        DemoBaseApplLayer::handleSelfMsg(msg);
    }
}

void TraCIDemo11p::handlePositionUpdate(cObject* obj)
{
    DemoBaseApplLayer::handlePositionUpdate(obj);

    // DetecciÃ³n mÃ¡s precisa de colisiÃ³n usando la API de SUMO
    if (traciVehicle->isStopped()) {
        if (!hasCrashed) {
            hasCrashed = true;
            collisionTime = simTime();
            Coord pos = mobility->getPositionAt(simTime());

            EV << "ðŸš¨ COLISIÃ“N DETECTADA en tiempo: " << simTime()
               << ", PosiciÃ³n: (" << pos.x << ", " << pos.y << ")" << endl;

            // Marcar visualmente
            traciVehicle->setColor(TraCIColor(255, 0, 0, 255));
            findHost()->getDisplayString().setTagArg("t", 0, "âœ– COLISIÃ“N");

            // Enviar mensaje de alerta
            sendCollisionAlert(pos);
        }
    } else {
        lastDroveAt = simTime();
        if (hasCrashed) {
            hasCrashed = false;
            traciVehicle->setColor(TraCIColor(0, 255, 0, 255)); // Verde
            findHost()->getDisplayString().setTagArg("t", 0, "");
        }
    }
}

void TraCIDemo11p::sendCollisionAlert(Coord pos)
{
    TraCIDemo11pMessage* wsm = new TraCIDemo11pMessage();
    populateWSM(wsm);
    wsm->setDemoData("COLLISION");
    wsm->setSenderAddress(myId);
    wsm->setSenderPos(pos);
    wsm->setTimestamp(simTime());

    if (dataOnSch) {
        startService(Channel::sch2, 42, "Collision Alert Service");
        scheduleAt(computeAsynchronousSendingTime(1, ChannelType::service), wsm);
    } else {
        sendDown(wsm);
    }
}

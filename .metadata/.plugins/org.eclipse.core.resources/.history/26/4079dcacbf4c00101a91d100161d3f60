#include "veins/modules/application/traci/TraCIDemo11p.h"
#include "veins/modules/application/traci/TraCIDemo11pMessage_m.h"
#include <iostream>

using namespace veins;

Define_Module(veins::TraCIDemo11p);

void TraCIDemo11p::initialize(int stage)
{
    DemoBaseApplLayer::initialize(stage);
    if (stage == 0) {
        sentMessage = false;
        hasCrashed = false;
        lastDroveAt = simTime();
        currentSubscribedServiceId = -1;
    }
}

void TraCIDemo11p::onWSM(BaseFrame1609_4* frame)
{
    TraCIDemo11pMessage* wsm = check_and_cast<TraCIDemo11pMessage*>(frame);

    // Mostrar visualmente que se recibió el mensaje
    findHost()->getDisplayString().setTagArg("i", 1, "green");

    // Si el mensaje es por colisión
    if (wsm->isCollision()) {
        std::string currentRoad = mobility->getRoadId();

        // Evitar calles internas SUMO tipo ':'
        if (!currentRoad.empty() && currentRoad[0] != ':') {
            // Si estoy en la misma ruta que reportó colisión
            if (currentRoad == wsm->getDemoData()) {
                // Cambiar a una ruta alternativa (puedes ajustarla según tu red)
                traciVehicle->changeRoute("23605600#0", 9999);
                EV << "🔁 Vehículo cambió de ruta para evitar colisión en " << currentRoad << endl;
            }
        }
    }

    // Propagar el mensaje si no lo habíamos reenviado antes
    if (!sentMessage) {
        sentMessage = true;
        wsm->setSenderAddress(myId);
        wsm->setSerial(3);
        scheduleAt(simTime() + 2 + uniform(0.01, 0.2), wsm->dup());
    }
}

void TraCIDemo11p::onWSA(DemoServiceAdvertisment* wsa)
{
    // Habilitar recepción en el canal de servicio
    if (currentSubscribedServiceId == -1) {
        mac->changeServiceChannel(static_cast<Channel>(wsa->getTargetChannel()));
        currentSubscribedServiceId = wsa->getPsid();
        if (currentOfferedServiceId != wsa->getPsid()) {
            stopService();
            startService(static_cast<Channel>(wsa->getTargetChannel()), wsa->getPsid(), "Mirrored Traffic Service");
        }
    }
}

void TraCIDemo11p::handleSelfMsg(cMessage* msg)
{
    if (TraCIDemo11pMessage* wsm = dynamic_cast<TraCIDemo11pMessage*>(msg)) {
        sendDown(wsm->dup());
        wsm->setSerial(wsm->getSerial() + 1);

        if (wsm->getSerial() >= 3) {
            stopService();
            delete wsm;
        } else {
            scheduleAt(simTime() + 1, wsm);
        }
    } else {
        DemoBaseApplLayer::handleSelfMsg(msg);
    }
}

void TraCIDemo11p::handlePositionUpdate(cObject* obj)
{
    DemoBaseApplLayer::handlePositionUpdate(obj);

    if (mobility->getSpeed() < 1) {
        if (simTime() - lastDroveAt >= 10 && !hasCrashed) {
            hasCrashed = true;
            Coord pos = mobility->getPositionAt(simTime());

            EV << "🚨 Vehículo detenido por posible colisión. Tiempo: " << simTime()
               << ", Posición: (" << pos.x << ", " << pos.y << ")" << endl;

            // Color rojo y texto visual en GUI
            traciVehicle->setColor(TraCIColor(255, 0, 0, 255));
            findHost()->getDisplayString().setTagArg("t", 0, "✖ COLISIÓN");
            traciVehicle->setSpeed(0);
            traciVehicle->setSpeedMode(0x00);

            if (!sentMessage) {
                sentMessage = true;

                TraCIDemo11pMessage* wsm = new TraCIDemo11pMessage();
                populateWSM(wsm);
                wsm->setDemoData(traciVehicle->getRouteId().c_str());
                wsm->setIsCollision(true);
                wsm->setCollisionPosition(pos);

                if (dataOnSch) {
                    startService(Channel::sch2, 42, "Traffic Information Service");
                    scheduleAt(computeAsynchronousSendingTime(1, ChannelType::service), wsm);
                } else {
                    sendDown(wsm);
                }
            }
        }
    } else {
        lastDroveAt = simTime();
    }
}



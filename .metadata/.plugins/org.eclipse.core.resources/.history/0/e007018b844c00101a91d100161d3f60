//
// Copyright (C) 2006-2011 Christoph Sommer <christoph.sommer@uibk.ac.at>
//
// Documentation for these modules is at http://veins.car2x.org/
//
// SPDX-License-Identifier: GPL-2.0-or-later
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

#include "veins/modules/application/traci/TraCIDemo11p.h"

#include "veins/modules/application/traci/TraCIDemo11pMessage_m.h"

using namespace veins;

Define_Module(veins::TraCIDemo11p);

void TraCIDemo11p::initialize(int stage)
{
    DemoBaseApplLayer::initialize(stage);
    if (stage == 0) {
        sentMessage = false;
        lastDroveAt = simTime();
        currentSubscribedServiceId = -1;
    }
}

void TraCIDemo11p::onWSA(DemoServiceAdvertisment* wsa)
{
    if (currentSubscribedServiceId == -1) {
        mac->changeServiceChannel(static_cast<Channel>(wsa->getTargetChannel()));
        currentSubscribedServiceId = wsa->getPsid();
        if (currentOfferedServiceId != wsa->getPsid()) {
            stopService();
            startService(static_cast<Channel>(wsa->getTargetChannel()), wsa->getPsid(), "Mirrored Traffic Service");
        }
    }
}

void TraCIDemo11p::onWSM(BaseFrame1609_4* frame)
{
    TraCIDemo11pMessage* wsm = check_and_cast<TraCIDemo11pMessage*>(frame);

    findHost()->getDisplayString().setTagArg("i", 1, "green");

    if (mobility->getRoadId()[0] != ':') traciVehicle->changeRoute(wsm->getDemoData(), 9999);
    if (!sentMessage) {
        sentMessage = true;
        // repeat the received traffic update once in 2 seconds plus some random delay
        wsm->setSenderAddress(myId);
        wsm->setSerial(3);
        scheduleAt(simTime() + 2 + uniform(0.01, 0.2), wsm->dup());
    }
}

void TraCIDemo11p::handleSelfMsg(cMessage* msg)
{
    if (TraCIDemo11pMessage* wsm = dynamic_cast<TraCIDemo11pMessage*>(msg)) {
        // send this message on the service channel until the counter is 3 or higher.
        // this code only runs when channel switching is enabled
        sendDown(wsm->dup());
        wsm->setSerial(wsm->getSerial() + 1);
        if (wsm->getSerial() >= 3) {
            // stop service advertisements
            stopService();
            delete (wsm);
        }
        else {
            scheduleAt(simTime() + 1, wsm);
        }
    }
    else {
        DemoBaseApplLayer::handleSelfMsg(msg);
    }
}

void TraCIDemo11p::handlePositionUpdate(cObject* obj)
{
    /*DemoBaseApplLayer::handlePositionUpdate(obj);

        // stopped for for at least 10s?
        if (mobility->getSpeed() < 1) {
            if (simTime() - lastDroveAt >= 10 && sentMessage == false) {
                findHost()->getDisplayString().setTagArg("i", 1, "red");
                sentMessage = true;

                TraCIDemo11pMessage* wsm = new TraCIDemo11pMessage();
                populateWSM(wsm);
                wsm->setDemoData(mobility->getRoadId().c_str());

                // host is standing still due to crash
                if (dataOnSch) {
                    startService(Channel::sch2, 42, "Traffic Information Service");
                    // started service and server advertising, schedule message to self to send later
                    scheduleAt(computeAsynchronousSendingTime(1, ChannelType::service), wsm);
                }
                else {
                    // send right away on CCH, because channel switching is disabled
                    sendDown(wsm);
                }
            }
        }
        else {
            lastDroveAt = simTime();
        }*/

        DemoBaseApplLayer::handlePositionUpdate(obj);

        // Método mejorado para detectar colisiones
            bool currentCollision = false;
            std::string collisionPartners = "";

            try {
                // Intenta obtener IDs de vehículos colisionados (método alternativo)
                auto nearbyVehicles = traciVehicle->getNeighbors();
                double minDistance = traciVehicle->getLength() * 0.8; // Umbral de colisión

                for (auto& vehicle : nearbyVehicles) {
                    double distance = traciVehicle->getDistanceTo(vehicle);
                    if (distance < minDistance) {
                        currentCollision = true;
                        collisionPartners += vehicle + " ";
                    }
                }
            } catch (const std::exception& e) {
                std::cerr << "ERROR al verificar colisiones: " << e.what() << std::endl;
            }

            std::cout << "Debug: Detectando colisiones para " << getExternalId() << std::endl;
            std::cout << "Vecinos detectados: " << nearbyVehicles.size() << std::endl;

            if (hasCrashed) {
                //findHost()->getDisplayString().setTagArg("i", 1, "blue");
                traciVehicle->setColor(TraCIColor(0, 0, 255));  // Azul
                getParentModule()->getDisplayString().setTagArg("t", 0, "COLISIÓN");
            }

            if (currentCollision && !hasCrashed) {
                hasCrashed = true;
                collisionTime = simTime();

                // Mensaje detallado por cout
                std::cout << "\n========================================"
                          << "\n|   COLISIÓN DETECTADA - CONSOLA       |"
                          << "\n========================================"
                          << "\n| Vehículo: " << getExternalId()
                          << "\n| Tiempo: " << simTime().str() << "s"
                          << "\n| Posición: X=" << mobility->getPositionAt(simTime()).x
                          << " Y=" << mobility->getPositionAt(simTime()).y
                          << "\n| Vehículos involucrados: " << (collisionPartners.empty() ? "OBJETO" : collisionPartners)
                          << "\n========================================\n" << std::endl;

                // Cambios visuales
                traciVehicle->setColor(TraCIColor(255, 0, 0, 255));
                //findHost()->getDisplayString().setTagArg("i", 1, "blue");
                traciVehicle->setColor(TraCIColor(0, 0, 255));  // Azul
                findHost()->getDisplayString().setTagArg("t", 0, "✖ COLISIÓN");
                EV << "🚨 Vehículo " << traciVehicle->getId() << " ha colisionado en " << simTime() << "s\n";

                std::cout << "🚗❌ Colisión detectada para vehículo " << traciVehicle->getId() << " en tiempo " << simTime() << std::endl;


                // Detener vehículo
                traciVehicle->setSpeed(0);
                traciVehicle->setSpeedMode(0x00);
            }
            std::cout << "Test: handlePositionUpdate ejecutado en tiempo: " << simTime().str() << std::endl;
           // Resto de tu lógica existente...
           if (mobility->getSpeed() < 1) {
               if (simTime() - lastDroveAt >= 10 && sentMessage == false) {

                   //findHost()->getDisplayString().setTagArg("i", 1, "blue");
                   traciVehicle->setColor(TraCIColor(0, 0, 255));  // Azul

                               sentMessage = true;

                               TraCIDemo11pMessage* wsm = new TraCIDemo11pMessage();
                               populateWSM(wsm);
                               wsm->setDemoData(mobility->getRoadId().c_str());

                               // host is standing still due to crash
                               if (dataOnSch) {
                                   startService(Channel::sch2, 42, "Traffic Information Service");
                                   // started service and server advertising, schedule message to self to send later
                                   scheduleAt(computeAsynchronousSendingTime(1, ChannelType::service), wsm);
                               }
                               else {
                                   // send right away on CCH, because channel switching is disabled
                                   sendDown(wsm);
                               }
               }
           }
           else {
               lastDroveAt = simTime();
           }
}

#include "veins/modules/application/traci/TraCIDemo11p.h"
#include "veins/modules/application/traci/TraCIDemo11pMessage_m.h"
#include "veins/base/utils/FindModule.h"

#include <iostream>

using namespace veins;

Define_Module(veins::TraCIDemo11p);

void TraCIDemo11p::initialize(int stage) {
    DemoBaseApplLayer::initialize(stage);
    if (stage == 0) {
        sentMessage = false;
        lastDroveAt = simTime();
        currentSubscribedServiceId = -1;
        hasCrashed = false;

        // Mostrar rutas disponibles al inicio
        std::list<std::string> routeIds = traci->getRouteIds();
        EV << "📍 Rutas definidas en SUMO:" << endl;
        for (const auto& routeId : routeIds) {
            EV << "- " << routeId << endl;
        }
    }
}

void TraCIDemo11p::onWSA(DemoServiceAdvertisment* wsa) {
    if (currentSubscribedServiceId == -1) {
        mac->changeServiceChannel(static_cast<Channel>(wsa->getTargetChannel()));
        currentSubscribedServiceId = wsa->getPsid();
        if (currentOfferedServiceId != wsa->getPsid()) {
            stopService();
            startService(static_cast<Channel>(wsa->getTargetChannel()), wsa->getPsid(), "Mirrored Traffic Service");
        }
    }
}

void TraCIDemo11p::onWSM(BaseFrame1609_4* frame) {
    TraCIDemo11pMessage* wsm = check_and_cast<TraCIDemo11pMessage*>(frame);

    if (wsm->isCollision()) {
        Coord myPos = mobility->getPositionAt(simTime());
        Coord colPos = wsm->getCollisionPosition();
        double dist = myPos.distance(colPos);

        if (!hasCrashed && dist < 300) {
            std::string currentRoute = traciVehicle->getRouteId();

            if (currentRoute != "altRoute") {
                EV << "⚠️ Colisión cercana. Cambiando de ruta a altRoute" << endl;
                traciVehicle->changeRoute("altRoute", 9999);
                traciVehicle->setColor(TraCIColor(0, 255, 0, 255)); // Verde = desvío
                findHost()->getDisplayString().setTagArg("t", 0, "🛣 Desvío por colisión");
                hasCrashed = true;
            }
        }
    }
}

//
// Copyright (C) 2006-2011 Christoph Sommer <christoph.sommer@uibk.ac.at>
//
// Documentation for these modules is at http://veins.car2x.org/
//
// SPDX-License-Identifier: GPL-2.0-or-later
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

#include "veins/modules/application/traci/TraCIDemo11p.h"

#include "veins/modules/application/traci/TraCIDemo11pMessage_m.h"
#include <iostream>

using namespace veins;

Define_Module(veins::TraCIDemo11p);

void TraCIDemo11p::initialize(int stage)
{
    DemoBaseApplLayer::initialize(stage);
    if (stage == 0) {
        sentMessage = false;
        lastDroveAt = simTime();
        currentSubscribedServiceId = -1;
        hasCrashed = false;

        // Mostrar rutas disponibles al inicio
        std::list<std::string> routeIds = traci->getRouteIds();
        EV << "Rutas definidas en la red:" << endl;
        for (const auto& routeId : routeIds) {
            EV << "- " << routeId << endl;
        }
    }
}

void TraCIDemo11p::onWSA(DemoServiceAdvertisment* wsa)
{
    if (currentSubscribedServiceId == -1) {
        mac->changeServiceChannel(static_cast<Channel>(wsa->getTargetChannel()));
        currentSubscribedServiceId = wsa->getPsid();
        if (currentOfferedServiceId != wsa->getPsid()) {
            stopService();
            startService(static_cast<Channel>(wsa->getTargetChannel()), wsa->getPsid(), "Mirrored Traffic Service");
        }
    }
}

void TraCIDemo11p::onWSM(BaseFrame1609_4* frame) {
    TraCIDemo11pMessage* wsm = check_and_cast<TraCIDemo11pMessage*>(frame);

    if (wsm->isCollision()) {
        Coord collisionPos = wsm->getCollisionPosition();
        Coord myPos = mobility->getPositionAt(simTime());
        double distance = collisionPos.distance(myPos);

        // Solo el 30% de veh√≠culos cercanos cambian de ruta
        if (distance < 500 && !hasCrashed && uniform(0, 1) < 0.3) {
            std::string currentEdge = traciVehicle->getRoadId();
            std::string currentRouteId = traciVehicle->getRouteId();

            // Obtener todas las rutas definidas
            std::list<std::string> allRouteIds = traci->getRouteIds();

            // Filtrar rutas alternativas (excluyendo la actual)
            std::vector<std::string> alternativeRoutes;
            for (const auto& routeId : allRouteIds) {
                if (routeId != currentRouteId && routeId != "route0" && routeId != "route1") {
                    alternativeRoutes.push_back(routeId);
                }
            }

            // Si hay rutas alternativas disponibles
            if (!alternativeRoutes.empty()) {
                try {
                    // Seleccionar una ruta alternativa aleatoria
                    std::string selectedRoute = alternativeRoutes[uniform(0, alternativeRoutes.size()-1)];
                    traciVehicle->changeRoute(selectedRoute, 999);
                    EV << "‚úÖ Veh√≠culo " << getId() << " cambiado a ruta: " << selectedRoute << endl;
                } catch (const cRuntimeError& e) {
                    EV << "‚ùå Error al cambiar ruta: " << e.what() << endl;
                }
            } else {
                EV << "‚ö†Ô∏è No hay rutas alternativas disponibles" << endl;
            }
        }
    }
}


void TraCIDemo11p::handleSelfMsg(cMessage* msg)
{
    if (TraCIDemo11pMessage* wsm = dynamic_cast<TraCIDemo11pMessage*>(msg)) {
        // send this message on the service channel until the counter is 3 or higher.
        // this code only runs when channel switching is enabled
        sendDown(wsm->dup());
        wsm->setSerial(wsm->getSerial() + 1);
        if (wsm->getSerial() >= 3) {
            // stop service advertisements
            stopService();
            delete (wsm);
        }
        else {
            scheduleAt(simTime() + 1, wsm);
        }
    }
    else {
        DemoBaseApplLayer::handleSelfMsg(msg);
    }
}

void TraCIDemo11p::handlePositionUpdate(cObject* obj)
{
    DemoBaseApplLayer::handlePositionUpdate(obj);

    if (mobility->getSpeed() < 1) {
        if (simTime() - lastDroveAt >= 10 && !hasCrashed) {
            hasCrashed = true;
            Coord pos = mobility->getPositionAt(simTime());

            EV << "üö® Veh√≠culo detenido por posible colisi√≥n. Tiempo: " << simTime()
               << ", Posici√≥n: (" << pos.x << ", " << pos.y << ")" << endl;

            traciVehicle->setColor(TraCIColor(255, 0, 0, 255));
            findHost()->getDisplayString().setTagArg("t", 0, "‚úñ COLISI√ìN");
            traciVehicle->setSpeed(0);
            traciVehicle->setSpeedMode(0x00);

            if (!sentMessage) {
                sentMessage = true;
                TraCIDemo11pMessage* wsm = new TraCIDemo11pMessage();
                populateWSM(wsm);

                // Enviar el ID de ruta actual, no un edge espec√≠fico
                wsm->setDemoData(traciVehicle->getRouteId().c_str());
                wsm->setIsCollision(true);
                wsm->setCollisionPosition(pos);

                if (dataOnSch) {
                    startService(Channel::sch2, 42, "Traffic Information Service");
                    scheduleAt(computeAsynchronousSendingTime(1, ChannelType::service), wsm);
                } else {
                    sendDown(wsm);
                }
            }
        }
    } else {
        lastDroveAt = simTime();
    }
}

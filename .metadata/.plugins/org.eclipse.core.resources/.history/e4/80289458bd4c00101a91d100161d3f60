#include "veins/modules/application/traci/TraCIDemo11p.h"
#include "veins/modules/application/traci/TraCIDemo11pMessage_m.h"
#include <iostream>

using namespace veins;

Define_Module(veins::TraCIDemo11p);

void TraCIDemo11p::initialize(int stage)
{
    DemoBaseApplLayer::initialize(stage);
    if (stage == 0) {
        sentMessage = false;
        lastDroveAt = simTime();
        currentSubscribedServiceId = -1;
        hasCrashed = false;

        // Mostrar rutas disponibles al inicio
        std::list<std::string> routeIds = traci->getRouteIds();
        EV << "Rutas definidas en la red:" << endl;
        for (const auto& routeId : routeIds) {
            EV << "- " << routeId << endl;
        }
    }
}

void TraCIDemo11p::onWSA(DemoServiceAdvertisment* wsa)
{
    if (currentSubscribedServiceId == -1) {
        mac->changeServiceChannel(static_cast<Channel>(wsa->getTargetChannel()));
        currentSubscribedServiceId = wsa->getPsid();
        if (currentOfferedServiceId != wsa->getPsid()) {
            stopService();
            startService(static_cast<Channel>(wsa->getTargetChannel()), wsa->getPsid(), "Mirrored Traffic Service");
        }
    }
}

void TraCIDemo11p::onWSM(BaseFrame1609_4* frame)
{
    TraCIDemo11pMessage* wsm = check_and_cast<TraCIDemo11pMessage*>(frame);

    findHost()->getDisplayString().setTagArg("i", 1, "green");

    if (wsm->isCollision()) {
        if (mobility->getRoadId() == "-32302591#4") traciVehicle->changeRoute("23605600#0", 9999);
    }
    else {
        if (mobility->getRoadId()[0] != ':') traciVehicle->changeRoute(wsm->getDemoData(), 9999);
    }

    if (!sentMessage) {
        sentMessage = true;
        // repeat the received traffic update once in 2 seconds plus some random delay
        wsm->setSenderAddress(myId);
        wsm->setSerial(3);
        scheduleAt(simTime() + 2 + uniform(0.01, 0.2), wsm->dup());
    }
}

void TraCIDemo11p::handleSelfMsg(cMessage* msg)
{
    if (TraCIDemo11pMessage* wsm = dynamic_cast<TraCIDemo11pMessage*>(msg)) {
        // send this message on the service channel until the counter is 3 or higher.
        // this code only runs when channel switching is enabled
        sendDown(wsm->dup());
        wsm->setSerial(wsm->getSerial() + 1);
        if (wsm->getSerial() >= 3) {
            // stop service advertisements
            stopService();
            delete (wsm);
        }
        else {
            scheduleAt(simTime() + 1, wsm);
        }
    }
    else {
        DemoBaseApplLayer::handleSelfMsg(msg);
    }
}

void TraCIDemo11p::handlePositionUpdate(cObject* obj)
{
    DemoBaseApplLayer::handlePositionUpdate(obj);

    if (mobility->getSpeed() < 1) {
        if (simTime() - lastDroveAt >= 10) {
            if (!hasCrashed && !sentMessage) {
                hasCrashed = true;
                Coord pos = mobility->getPositionAt(simTime());

                EV << "ðŸš¨ VehÃ­culo detenido por posible colisiÃ³n. Tiempo: " << simTime()
                   << ", PosiciÃ³n: (" << pos.x << ", " << pos.y << ")" << endl;

                traciVehicle->setColor(TraCIColor(255, 0, 0, 255));
                findHost()->getDisplayString().setTagArg("t", 0, "âœ– COLISIÃ“N");
                findHost()->getDisplayString().setTagArg("i", 1, "red");
                traciVehicle->setSpeed(0);
                traciVehicle->setSpeedMode(0x00);

                sentMessage = true;
                TraCIDemo11pMessage* wsm = new TraCIDemo11pMessage();
                populateWSM(wsm);

                wsm->setDemoData(mobility->getRoadId().c_str());
                wsm->setIsCollision(true);
                wsm->setCollisionPosition(pos);

                if (dataOnSch) {
                    startService(Channel::sch2, 42, "Traffic Information Service");
                    scheduleAt(computeAsynchronousSendingTime(1, ChannelType::service), wsm);
                } else {
                    sendDown(wsm);
                }
            }
        }
    } else {
        lastDroveAt = simTime();
        // Reset crash state if vehicle starts moving again
        if (hasCrashed) {
            hasCrashed = false;
            traciVehicle->setColor(TraCIColor(0, 255, 0, 255));
            findHost()->getDisplayString().removeTag("t");
        }
    }
}
